#include <iostream>

using namespace std;
int main()
{
    
    //vector<int>arr(6);
    int arr[6];
    for(auto it: arr){
        cin>>it;
    }
    
    int count=0;
    int key;
    cin>>key;
    for(auto it :arr){
        if(it==key){
            return count;
        }
        
        count++;
    }
    cout<<count;
    return 0;
}
---------------------------------------------------------------------------------------------------------------
find maximum or minimum number by [apna college]......
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    int max=INT_MIN;
    int min=INT_MAX;
    for(int i=0; i<n; i++){
        if(arr[i]>max){
            max=arr[i];
        }
        if(arr[i]<min){
            min=arr[i];
        }
    }
    cout<<max<<"\n"<<min;
}

----------------------------------------------another method---------------------
#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    cin >> n;
    int arr[n];
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    int maxNo = INT_MIN;
    int minNo = INT_MAX;
    for(int i = 0; i < n; i++) {
        maxNo = max(maxNo, arr[i]);
        minNo = min(minNo, arr[i]);
    }
    cout << "Maximum: " << maxNo << "\n";
    cout << "Minimum: " << minNo << "\n";
    return 0;
}
-----------------------------------------------------------------------------------------------------------------

find the key in a array [apna college]

#include <bits/stdc++.h>
using namespace std;
int linearSearch(int arr[], int n, int key){
    for(int i=0; i<n; i++){
        if(arr[i]==key){
        return i;
    }
}
    
return 0;
}
int main() {
    int n;
    cout<<"enter the size of array :"<<" ";
    cin >> n;
    int arr[n];
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    int key;
    cin>>key;
    cout<<linearSearch(arr,n,key);
    return 0;
}
-----------------------------------------------------------------------------------------------------------------

find number with binary search[apna college]

#include <bits/stdc++.h>
using namespace std;
int binarySearch(int arr[], int n, int key){
    int s=0;
    int e=n;
    
    while(s<=e){
        int mid=(s+e)/2;
        if(arr[mid]==key){
        return mid;
    }
    else if(arr[mid]>key){
        e=mid-1;
    }
    else if(arr[mid]<key){
        s=mid+1;
    }
}
    
return 0;
}
int main() {
    int n;
    cout<<"enter the size of array :"<<" ";
    cin >> n;
    int arr[n];
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    int key;
    cout<<"enter the key";
    cin>>key;
    cout<<binarySearch(arr,n,key);
    return 0;
}

------------------------------------------------------------------------------------------------------------------
find number with binary search

#include<bits/stdc++.h>
using namespace std;
bool binarySearch(vector<int>&arr,int key)
{
    int l=0;
    int hi=arr.size()-1;
    int mid=(l+hi)/2;
    bool flag=false;
    while(l<=hi)
    {   
        if(arr[mid]==key)
        {
            flag=true;
            cout<<mid;
            return flag;
        }
        else if(arr[mid]>key)
        {
            hi=mid-1;
        }
        else
        {
            l=mid+1;
        }
        mid=(l+hi)/2;
    }
    return flag;
}

int main()
{
    vector<int>arr(10);
    int key;
    cin>>key;
    for(auto &it:arr)
    {
        cin>>it;
    }
   if(binarySearch(arr,key))
   {
       cout<<" Element Found ";
   }
   else
   {
       cout<<"Element not Found";
   }
}
--------------------------------------------
----------------------------------------------------------------------
Q find the smmallest even number and largest even number in an array;

#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    cout << "Enter array size: ";
    cin >> n;
    int arr[n]; 
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int maxIndex = -1; // Initialize maxIndex with -1
    for(int i = 0; i < n; i++) {
        if(arr[i] % 2 == 0) { // Check if element is even
            if(maxIndex == -1 || arr[i] > arr[maxIndex]) { // Compare with arr[maxIndex]
                maxIndex = i;
            }
        }
    }

    int minIndex = -1; // Initialize minIndex with -1
    for(int i = 0; i < n; i++) {
        if(arr[i] % 2 == 0) { // Check if element is even
            if(minIndex == -1 || arr[i] < arr[minIndex]) { // Compare with arr[minIndex]
                minIndex = i;
            }
        }
    }

        cout << "Index of maximum even element: " << maxIndex << endl;
        cout << "Index of minimum even element: " << minIndex << endl;
  

    return 0;
}
----------------------------------------------------------------------------------------------
for max----

#include <iostream>
using namespace std;
int main()
{
    int arr[]={5,6,8,10};
    int max=-1;
    for(int i: arr){
        if(arr[max]<arr[i] && arr[i]%2==0){
            max=i;
    }
}
cout<<max;

    return 0;
}

for min----

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int arr[]={5,6,8,10};
    //int n=arr.size();
    int min=-1;
    for(int i: arr){
        if(arr[min]>=arr[i] && arr[i]%2==0){
            min=i;
    }
}
cout<<min;
return 0;
}
------------------------------------------------------------------------------------------------------------------

Q. reverse the array

two poiinter approach

#include <bits/stdc++.h>
using namespace std;
void reverseArray(vector<int>&arr){
    int i=0;
    int j=arr.size()-1;
    while(i<j){
        swap(arr[i],arr[j]);
        i++;
        j--;		
    }
}

int main()
{
    vector<int>arr={2,3,4,5,6,7,8};
    int n=arr.size();
    reverseArray(arr);
    for(auto it: arr){
        cout<<it<<" ";
    }

return 0;
}

Q find the target value of 15 in array  by using addition two value 
we can take target value from user also..
normal approach

o(n2) approach

#include <bits/stdc++.h>
using namespace std;
vector<int>twoSum(vector<int>&arr, int target){
    for(int i=0; i<arr.size(); i++){
        for(int j=i+1; j<arr.size(); j++){
            if(arr[i]+arr[j]==target){
                return {arr[i],arr[j]};
            }
        }
    }
    return {};		
}
int main(){
    vector<int>arr={2,3,4,5,6,7,8};
    int target;
    cin>>target;
    vector<int>ans=twoSum(arr,target);
    if(arr.empty()){
        cout<<"no pairs found";
        
    }
    else{
        cout<<ans[0]<<" "<<ans[1];
    }
    
}
ye 0 or 1 return vale indexing ki value hain


Q  find the target value of 15 in array  by using addition two value 
we can take target value from user also..
BY USING TWO POINTER APPROACH..\
#include<bits/stdc++.h>
using namespace std;
//[1,2,3,4,5,6,7,8]
vector<int>twoSum(vector<int>&arr,int target)
{
    int i=0;
    int j=arr.size()-1;
    while(i<j)
    {
        int sum = arr[i]+arr[j];
        if(sum==target)
            return {arr[i],arr[j]};
        else if(sum<target){
            i++;
        }
        
        else if(sum>target){
            j--;
        }
    
    }
    return {};
   
}
int main()
{
    vector<int>arr={1,2,3,4,5,6,7,8};
    int target;
   cout<<"Enter target value:\n";
    cin>>target;
    cout<<"original array:\n";
    for(auto it:arr)
    {
        cout<<it<<" ";
    }
    cout<<"\n";
   vector<int>ans =  twoSum(arr,target);
   if(ans.empty())
   {
       cout<<"No pairs found";
   }
   else
   {
       cout<<ans[0]<<" and "<< ans[1] <<" makes the target: "<<target;
   }
   
}

Q sorting the number in ascending order[apna college]
selection sort

#include <bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cout<<"enter the size";
    cin>>n;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    for(int i=0; i<n-1; i++){ 
        for(int j=i+1; j<n; j++){
            if(arr[j]<arr[i]){
                int temp=arr[j];
                arr[j]=arr[i];
                arr[i]=temp;
            }
        }
    }
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    cout<<"\n";
}

                               or swap with one code
#include <bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cout<<"enter the size";
    cin>>n;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    for(int i=0; i<n-1; i++){ 
        for(int j=i+1; j<n; j++){
            if(arr[j]<arr[i]){
                swap(arr[i],arr[j]);
                // int temp=arr[j];
                // arr[j]=arr[i];
                // arr[i]=temp;
            }
        }
    }
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    cout<<"\n";
}

with using function
#include<bits/stdc++.h>
using namespace std;
void selectionSort(int arr[],int n){
     int count=1;
    while(count<n){
        for(int i=0; i<(n-count); i++){
        if(arr[i]>arr[i+1]){
            swap(arr[i],arr[i+1]);
            // int temp=arr[i];
            // arr[i]=arr[i+1];
            // arr[i+1]=temp;
        }
        
    }
    count++;
}
}

int main()
{
    int n;
    cout<<"enter array size";
    cin>>n;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
   selectionSort(arr,n);
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    return 0;
}


Q find the square c2=a2+b2;

my solution(not correct)

#include<bits/stdc++.h>
using namespace std;
vector<int>twoSum(vector<int>&arr,int target){
    int i=0;
    int n=arr.size();
    int j=n-1;
    for(int i=0; i<n; i++){
        for(int j=i; j<n; j++){
            int c= sqrt(i*i+j*j);
            if(c==target){
                return {arr[i],arr[j]};
            }
        }
    }
    return {};
}
int main(){
    vector<int>arr={1,2,3,4,5,6,7,8};
    int target;
    cin>>target;
    vector<int>ans=twoSum(arr,target);
    if(arr.empty()){
        cout<<"";
    }
    else{
        cout<<ans[0]<<" "<<ans[1];
    }
}


Q sum of two array 
a1=[9,8,7]
a2=[5,6,2]
a3=[15,4,9]
#include<bits/stdc++.h>
using namespace std;

void sumArray(vector<int>&arr1,vector<int>&arr2)
{
    int carry = 0;
    vector<int>sum(arr1.size(),0);
    for(int i=arr1.size()-1;i>=0;i--)
    {	 
        if(i==0)
        {
            sum[i] = arr1[i]+arr2[i]+carry;
           
        }
        else
        {
            sum[i] = arr1[i]+arr2[i]+carry;
            carry  = sum[i]/10;
            sum[i] = sum[i]%10;
        }
    }
   // cout<<carry;
    for(auto it:sum)
    {
        cout<<it<<" ";
    }
}

int main()
{
    vector<int>arr1={9,9,8,8};
    vector<int>arr2={9,5,7,6};
    sumArray(arr1,arr2);
}

 Q find duplicate

 #include <bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cout<<"enter the size";
    cin>>n;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    int k=0;
    for(int i=0; i<n; i++){
        if(arr[i]!=arr[k]){
            ++k;
            arr[k]=arr[i];
        }
    }
    for(int i=0; i<=k; i++){	
        cout<<arr[i]<<" ";
    }
    cout<<"\n";
}


                                   another method---------------------------------------------


 #include <bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cout<<"enter the size";
    cin>>n;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    for(auto it:arr)
    {
        cout<<it<<" ";
    }
    int sizeofans= *max_element(arr, arr + n) +1;
    int freqarr[sizeofans]={0};
    cout<<"\n";
    for(int i=0;i<n;i++)
    {
        freqarr[arr[i]]++;
    }
    cout<<"\n";
    for(int i=0;i<sizeofans;i++)
    {
        cout<<freqarr[i]<<" ";
    }
    int count =0;
    for(int i=0;i<sizeofans;i++)
    {
        if(freqarr[i]>0)
        {
            count++;
        }
    }
    int ans[count];
    int k=0;
    for(int i=0;i<sizeofans;i++)
    {
        if(freqarr[i]>0)
        {
            ans[k]=i;
            k++;
        }
    }
    cout<<"\n";
    for(auto it:ans)
    {
        cout<<it<<" ";
    }
}

merge two array

#include <bits/stdc++.h>
using namespace std;


int main()
{
    int arr1[4]={2,4,6,8};
    int arr2[3]={1,3,5};
    int n;
    // cin>>n;
    int arr3[7]={0};
    int k;
    int i;
    int j;
    
    while(i<arr1.size() && j<arr1.size()){
        if(arr1[i]>arr2[j]){
            arr3[k]=arr2[j];
            k++;
            j++;
        }
        if(arr1[i]<arr2[j]){
            arr3[k]=arr1[i];
            k++;
            i++;
        }
    }
    while(j<arr2.size()){
        arr3[k]=arr2[j];
        j++;
    }
    while(i<arr1.size()){
        arr3[k]=arr1[i];
        i++;
    }
    for(int it:arr3){
        cout<<it<<" ";
    }
    return 0;
}

-----------------------------------------------------------------------------------------
Q rotate the array with value k is equal is 2 times
#include <bits/stdc++.h>
using namespace std;
void maxareacal(vector<int>&arr,int k){
    k=k%arr.size();
    for(auto it:arr){
        cout<<it<<" ";
    }
    cout<<"\n";
    reverse(arr.begin(),arr.end());
    for(auto it:arr){
        cout<<it<<" ";
    }
    cout<<"\n";
    reverse(arr.begin(),arr.begin()+k);
    for(auto it:arr){
        cout<<it<<" ";
    }
    cout<<"\n";
    reverse(arr.begin()+k,arr.end());
    for(auto it:arr){
        cout<<it<<" ";
    }
    cout<<"\n";
    
}
int main(){
    vector<int>arr={1,8,6,2};
    int k=2;
    maxareacal(arr,k);
}
                                             OR                                                             

#include <bits/stdc++.h>
using namespace std;
void maxareacal(vector<int>&arr,int k){
    k=k%arr.size();
    reverse(arr.begin(),arr.end());
    reverse(arr.begin(),arr.begin()+k);
    reverse(arr.begin()+k,arr.end());
    for(auto it:arr){
        cout<<it<<" ";
    }
    cout<<"\n";
    
}
int main(){
    vector<int>arr={1,8,6,2};
    int k=2;
    maxareacal(arr,k);
}

------------------------------------------------------------------------
swap in 2 D array 

#include<bits/stdc++.h>
using namespace std;

vector<vector<int>>swapnumbers(vector<vector<int>>&arr,int row1,int col1,int row2,int col2)
{
    // vector<int>&a1 = arr[row1];
    // vector<int>&a2 = arr[row2];
    // //a1 = {4,5,6}
    // //a2 = {10,11,12}
    // int &temp1 = a1[col1];
    // int &temp2 = a2[col2];
    // // cout<<temp1 <<" "<<temp2;
    // int temp3 = temp1;
    // temp1 = temp2;
    // temp2 = temp3;
   
    int temp = arr[row1][col1];
    arr[row1][col1] =arr[row2][col2];
    arr[row2][col2]=temp;
   
    return arr;
}

int main()
{
    vector<vector<int>>arr={
        {1,2,3},
        {4,5,6},
        {7,8,9},
        {10,11,12}
    };
    vector<vector<int>>ans = swapnumbers(arr,1,1,3,1);
    for(auto row:ans)
    {
        for(auto col: row)
        {
            cout<<col<<" ";
        }
        cout<<"\n";
    }
}


